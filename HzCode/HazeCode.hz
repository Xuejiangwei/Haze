// 引 基本库·字符串
// 引 基本库·文件
//引 对象
//引 列表
//引 五子棋
//引 测试·动态库测试·动态库测试
//引 基本库·哈希表
// 引 OpenGL接口
//引 测试
//引 开始界

//整数 甲 = 101
//三维点 三维点甲()
//五子棋* 我的五子棋 = 空指针
//列表<小数> 小甲()
//列表<整数*> 指针列表()

类 点
{
    数据 
    {
        显
        {
            整数 横坐标
            整数 纵坐标
        }
    }

    函数
    {
        显
        {
            点(整数 横, 整数 纵)
            {
                横坐标 = 横
                纵坐标 = 纵
                //打印点()
            }

            空 打印点()
            {
                打印("点的 横坐标 %d 纵坐标 %d\n", 横坐标, 纵坐标)
            }

            整数 打印点并且相加(整数 甲, 整数 乙)
            {
                打印点()
                返 甲 + 乙
            }
        }
    }
}

// 类 线集合
// {
//     数据
//     {
//         隐
//         {
//             点[][] 线数组 
//         }
//     }

//     函数
//     {
//         显
//         {
//             线集合()
//             {
//                线数组 = 生成 点[2][0]
//             }

//             空 添加线(点 甲, 点 乙)
//             {
//                 线数组[0].添加(甲)
//                 线数组[1].添加(乙)
//             }

//             空 打印所有线()
//             {
//                 正整数64 长度 = 线数组[0].长度()
//                 循环(整数 甲 = 0, 甲 < 长度, 甲++)
//                 {
//                     打印("线%d 点1 %d %d 点2 %d %d\n", 甲, 线数组[0][甲].横坐标, 线数组[0][甲].纵坐标, 线数组[1][甲].横坐标, 线数组[1][甲].纵坐标)
//                 }
//             }
//         }
//     }
// }


// 类 桌面
// {
//     数据
//     {
//         显
//         {
//             线集合 所有线
//         }
//     }

//     函数
//     {
//         显
//         {
//             桌面()
//             {
//                 所有线 = 生成 线集合()
//             }
//         }
//     }
// }


// 类 动物
// {
//     数据
//     {
//         显
//         {
//             字符 动物类型
//             整数 序号
//         }

//     }

//     函数
//     {
//         显
//         {
//             动物(字符 类型名)
//             {
//                 动物类型 = 类型名
//             }

//             空 打印动物类型()
//             {
//                 打印("动物类型 %s\n", 动物类型)
//             }

//             纯虚 空 发声()

//             虚 空 测试虚函数()
//             {
//                 打印("动物 测试虚函数\n")
//             }
//         }
//     }
// }

// 类 宠物
// {
//     数据
//     {
//         显
//         {
//             字符 技能
//             整数 序号
//         }
//     }

//     函数
//     {
//         显
//         {
//             宠物(字符 技能名)
//             {
//                 技能 = 技能名
//             }

//             纯虚 空 技能攻击()

//             虚 空 测试虚函数()
//             {
//                 打印("宠物 测试虚函数\n")
//             }
//         }

//         隐
//         {
//             空 打印技能()
//             {
//                 打印("技能攻击 %s\n", 技能)
//             }
//         }
//     }
// }

// 类 狗 : 动物, 宠物
// {
//     数据
//     {
//         显
//         {
//             字符 名字
//         }
//     }

//     函数
//     {
//         显
//         {
//             狗()
//             {
//                 名字 = "大黄"
//                 动物类型 = "狗"
//                 技能 = "甩头撕咬"
//                 序号 = 110
//                 宠物::序号 = 119
//             }

//             虚 空 发声()
//             {
//                 打印("%s 汪 汪 汪\n", 动物类型)
//             }

//             虚 空 测试虚函数() 
//             {
//                 发声()
//                 打印("%s %s 测试虚函数\n", 名字, 动物类型)
//                 动物::测试虚函数()
//                 宠物::测试虚函数()
//             }
//         }
//     }
// }

数据
{
    //整数 全局整数 = 400
    // 五子棋 我的五子棋 = 空指针
}

函数
{
    // 空 引用测试(整数& 甲, 整数& 乙)
    // {
    //     甲 = 10123
    //     乙 = 123
    //     打印("引用测试 %d %d\n", 甲, 乙)
    // }

    // 整数 我的加法(整数 甲, 整数 乙)
    // {
    //     返 甲 + 乙
    // }

    // 空 五子棋游戏(整数 甲, 整数 乙)
    // {
    //     打印("开始游戏 甲 %d 乙 %d\n", 甲, 乙)
    //     五子棋 我的五子棋 = 生成 五子棋()
    //     若 (我的五子棋 != 空指针)
    //     {
    //         我的五子棋.开始游戏()
    //         当(真)
    //         {
    //             甲 = 100
    //             乙 = 99
    //             输入("%d%d", 取址(甲), 取址(乙))
    //             我的五子棋.放子(甲, 乙, 五子棋颜色::玩家默认颜色)

    //             若(我的五子棋.是否胜利(五子棋颜色::玩家默认颜色))
    //             {
    //                 打印("玩家胜利！\n")
    //                 跳出
    //             }

    //             我的五子棋.模拟计算AI放子(甲, 乙, 五子棋颜色::AI默认颜色)
    //             我的五子棋.放子(甲, 乙, 五子棋颜色::AI默认颜色)
    //             若(我的五子棋.是否胜利(五子棋颜色::AI默认颜色))
    //             {
    //                 打印("AI胜利！\n")
    //                 跳出
    //             }
    //         }

    //         打印("游戏结束！\n")
    //     }
    // }

    整数 测试加法(整数 甲, 整数 乙)
    {
        返 甲 + 乙
    }

    空 测试主函数()
    {
        // 空<整数, 整数> 测试函数 = 取址(五子棋游戏)
        // 测试函数(1, 2)

        // 整数<整数, 整数> 测试甲 = 取址(测试加法)
        // 整数 乙 = 测试甲(1)
        // 打印("乙 %d", 乙)

        // 整数<点, 整数, 整数> 测试乙 = 取址(点::打印点并且相加)

        点 点乙 = 生成 点(100, 99)
        对象<小数> 小数甲 = 生成 对象<小数>(0.12345)
        // 点[] 数组点 = 生成 点[2]
        // 数组点[1] = 点乙
        // 哈希<整数, 点[]> 哈希表 = 生成 哈希<整数, 点[]>()
        // 哈希表[100] = 数组点

        // 点[] 第一个点 = 哈希表[100]
        // 第一个点[1].打印点()
        // 整数 乙 = 测试乙(点乙, 1, 99)
        // 打印("乙 %d", 乙)

        整数<整数, 整数> 测试丙 = 函数(整数 甲, 整数 乙)
        {
            点乙.打印点()
            打印("小数1 %f\n", 小数甲.获得())

            小数 临时小数 = 0.789
            小数甲.设置(临时小数)

            打印("小数2 %f\n", 小数甲.获得())
            返 甲 + 乙
            //返 测试乙(点乙, 甲, 乙)
        }

        整数 乙 = 测试丙(111, 99)
        打印("乙 %d\n", 乙)

        // 对象<整数> 整数对象甲 = 生成 对象<整数>(16)

        // 空<整数, 整数> 测试函数1 = (){}

        //降低分辨率("abc")
        // 五子棋游戏()

        // 整数 甲1 = 甲
        // 整数 乙1 = 乙
        // 若(甲 >= 999 或 乙 >= 999 或 甲1 >= 9 或 乙1 > 0)
        // // 若(甲 >= 999 或 乙 >= 999)
		// {
        //     打印("测试成功\n")
        // }

        // 打印("函数结束\n")

        // 乙 = 甲 = 1 + 2 + 3 + 4 * 5 * (6 + 7 / 2 - 5) + 4
        /*
            b-ast left : 乙 right : 甲
            b-ast left : 甲 right : 1 + 2 + 3 + 4 * 5 + 6
            b-ast left : 1 + 2 + 3 + 4 * 5  right : 6


            b-ast left : 1 + 2 + 3  right : 4 * 5
            b-ast left : 1 + 2    right : 3
            b-ast left : 1  right : 2
            b-ast left : 4  right : 5
        */
        /*
            是右结合
            大于前一个，新建表达式
            若下一个小于当前 结束表达式
            等于当前，继续表达式
            是右结合，生成二元表达式
        */
        // 乙 甲
        // 甲 1
        // 1 + 2, 3
        // 3, 4 * 5
        // 4 * 5, 6 
        // 甲 = 1 + 我的加法(99, 99) + 我的加法(99, 55)
        // 打印("    %d  %d", 甲, 乙)
        // 动态类 类甲 = 生成动态类()
        // 若 (类甲 != 空指针)
        // {
        //     打印("    %d\n", 甲)
        // }
        // 打印("类成员1 %d 甲 %d\n", 类甲.value, 甲)
        // 甲 = 1 + 类甲.value + 类甲.value + 类甲.value

        // 类甲.value = 1
        // 类甲.Add(100, 999)
        // 打印("类成员2 %d 甲 %d\n", 类甲.value, 甲)

        // 开始界面 界面 = 生成 开始界面()
        // 界面.初始化()

        // 狗 测试狗 = 生成 狗()
        // 测试狗.打印动物类型()
        // 测试狗.测试虚函数()

        // 五子棋游戏()
        // 引用测试(甲, 乙)
        // 整数 丙 = 10
        // 打印("丙 %d", 丙)

        // 点 测试甲 = 生成 点(0, 1)
        // 点 测试乙 = 生成 点(99, 99)

        // 桌面 测试桌面 = 生成 桌面()
        // 测试桌面.所有线.添加线(测试甲, 测试乙)

        // 甲 = 测试桌面.所有线.线数组[1][0].横坐标
        // 乙 = 甲 > 0 ? 甲 + 1 : 甲 + 2
        // 打印("测试主函数 %d %d %d\n", 甲, 乙, 全局整数)
        // 测试乙.打印点()

        // 线集合 测试线 = 生成 线集合()
        // 测试线.添加线(测试甲, 测试乙)
        // 测试线.打印所有线()

        //引用测试(甲, 乙)

        // 整数[][] 甲数组 = 生成 整数[3][3]
        // 甲数组[0][0] = 100
        // 甲数组[0][1] = 200
        // 甲数组[1][0] = 300
        // 甲数组[1][1] = 全局整数

        // 乙 = 甲数组[1][1]
        //打印("数组 %d %d\n", 乙, 甲)

        // 点 点甲 = 生成 点(10, 12)
        // 点 点乙 = 生成 点(100, 120)

        // 线 线丙 = 生成 线(点甲, 点乙)
        // 线丙.打印线()

        // 字符 壹 = "床前明月光"
        // 字符 贰 = "疑是地上霜"
        // 字符 叁 = "举头望明月"
        // 字符 肆 = "低头思故乡"

        // 字符 静夜思 = 生成 字符()
        // 静夜思.格式化("%d %s\n%d %s\n%d %s\n%d %s\n", 1, 壹, 2, 贰, 3, 叁, 4, 肆)
        // 字符 完整静夜思 = "静夜思\n  李白\n"
        // 完整静夜思.接(静夜思)
        // 打印("%s", 完整静夜思)

        //整数[][] 甲数组 = 生成 整数[5][4]
        //列表<列表<整数>> 乙数组

        //整数64 长度 = 甲数组->维之长度(0)

        //打印("数组长度 %d\n", 长度)
        //函数<整数&, 整数> 测试函数指针 = 引用测试
        // 整数8 甲8
        // 整数16 甲16
        //整数 甲32 = 200
        // 整数64 甲64

        // 正整数 正甲32
        // 正整数64 正甲64

        // 小数 小甲32
        // 小数64 小甲64
        //测试函数指针(甲32, 乙)

        // 整数[19][19] 棋盘 = 生成 整数[19][19]
        // 字符 甲 = "我的测试字符串"
        // 字符 乙 = "我的测试字符串"
        // 哈希表<整数, 整数> 我的哈希表()

        // 函数<整数, 整数> 测数函数 = 空指针

        // 我的哈希表->插入值()

        //文件 我的文件("G:\\GitHub\\River\\River\\KnowledgeNeuron\\NeuronText\\李白.txt", 文件操作方式::只读)

        //字符 第一个字符 = 25125
        //我的文件之写入字符(第一个字符)
        //第一个字符 = 我的文件之读取字符()
        //字符[] 我的字符串 = 生成 字符[14]
        //我的文件之读取一行字符串(&我的字符串)
        //字符串* 丙 = 生成 字符串("测试主函数字符串")
        //丙指之添加(" 附加字符串")
        //字符 测试字符 = 丙指之获得(0)

        //我的文件之写入字符串(丙指之获得字符地址())
        
        // 打印("打印字符串 %s", &我的字符串)
        // 我的文件之读取一行字符串(&我的字符串)
        // 打印("打印字符串 %s", &我的字符串)
        
        // 我的文件之关闭()
        // 打印("测试主函数 %d\n", 甲 + 乙)



        // 整数 甲0 = 100
        // 整数 甲1 = 250
        // 整数 甲2 = 500
        // 指针列表之添加(&甲0)
        // 指针列表之添加(&甲1)
        // 指针列表之添加(&甲2)
        // 整数* 丙 = 指针列表之获得(0)
        // 打印(" 丁 %d\n", *丙)  
    }
}

// }