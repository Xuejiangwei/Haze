引 标准内存

正长整数 FNV偏移 = 14695981039346656037
正长整数 FNV质数 = 1099511628211

函数
{
    正长整数 FNV哈希(正字节* 值, 正长整数 字节数)
    {
        正长整数 哈希值 = FNV偏移
        循环(正长整数 甲 = 0, 甲 < 字节数, 甲++)
        {
            哈希值 ^= *值
            哈希值 *= FNV质数
            值++
        }

        返 哈希值
    }
}

模板 <类型 子, 类型 值>
类 哈希链表
{
    数据
    {
        公
        {
            子 存储键
            值 存储值
            哈希链表<子, 值>* 下个 = 空指针
        }
    }

    函数
    {
        公
        {
            哈希链表()

            空 插入(子& 键, 值& 键值)
            {
                哈希链表<子>* 最后指针 = 下个

                当(最后指针指之下个 != 空指针)
                {
                    若(最后指针指之存储键 == 键)
                    {
                        最后指针指之存储值 = 键值
                        返
                    }

                    最后指针 = 最后指针指之下个
                }

                哈希链表<子, 值>* 插入值 = 生成 哈希链表<子, 值>()
                插入值指之存储键 = 键
                插入值指之存储值 = 键值

                最后指针指之下个 = 插入值
            }
        }

    }
}

模板 <类型 子, 类型 值>
类 哈希表
{
    数据
    {
        私
        {
            哈希链表<子, 值>*[] 桶
            正长整数 长度
        }
    }

    函数
    {
        公
        {
            哈希表()
            {
                桶 = 生成 哈希链表<值>*[8]

                循环(正长整数 甲 = 0, 甲 < 8, 甲++)
                {
                    哈希链表<值>* 链表头 = 生成 哈希链表<值>()
                    桶[甲] = 链表头
                }
            }

            空 添加(子 键, 值 键值)
            {
                正长整数 哈希值 = FNV哈希(&键, 字节大小(子))
                正长整数 桶长度 = 数组长度(桶)

                若 (哈希值 < 桶长度)
                {
                    桶[哈希值]指之插入(键值)
                    长度++
                }
                否则
                {
                    重新哈希()
                }
            }

            值 查找(子 键)
            {
                正长整数 哈希值 = 获得哈希值(键)
                正长整数 桶索引 = 获得桶索引(键, 哈希值)

                值 结果 = 查找结点(桶索引, 键, 哈希值)
                返 结果
            }

            // 值 查找结点(正长整数 桶索引, 子 键, 正长整数 哈希值)
            // {

            // }
        }

        私
        {
            正长整数 获得桶索引(正长整数 哈希值)
            {
                正长整数 桶长度 = 数组长度(桶)
                返 哈希值 % 桶长度
            }

            正长整数 获得下次增长桶的长度()
            {
                正长整数 桶长度 = 数组长度(桶)

                若(桶长度 < 512 且 桶长度 * 8 >= 桶长度 + 1)
                {
                    返 桶长度 * 8
                }
                
                返 桶长度 + 1
            }

            空 重新哈希()
            {
                正长整数 旧桶长度 = 数组长度(桶)
                正长整数 新桶长度 = 获得下次增长桶的长度()

                //从头到尾链表重新调用插入函数进行添加
                长度 = 0
                哈希链表<值>*[] 旧桶 = 桶
                桶 = 生成 哈希链表<值>*[新桶长度]
                循环(正长整数 甲 = 0, 甲 < 新桶长度, 甲++)
                {
                    哈希链表<值>* 链表头 = 生成 哈希链表<值>()
                    桶[甲] = 链表头
                }

                循环(正长整数 甲 = 0, 甲 < 旧桶长度, 甲++)
                {
                    若(旧桶[甲]指之下个 != 空指针)
                    {
                        哈希链表<子>* 最后指针 = 旧桶[甲]指之下个

                        当(最后指针指之下个 != 空指针)
                        {
                            添加(最后指针指之存储键, 最后指针指之存储值)
                            最后指针 = 最后指针指之下个
                        }
                    }
                }
            }
        }
    }
}
